@page "/calculator"


<h3>Calculator</h3>


@if (errorMessage != null)
{
    <div class="modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>@errorMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


    @* <div class="alert alert-danger text-center" role="alert" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <strong>Error</strong> @errorMessage
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="ClearErrorMessage">
            <span aria-hidden="true">&times;</span>
        </button>
    </div> *@
@* } *@

<div class="input-group mb-3">
  <span class="input-group-text" id="inputGroup-sizing-default">First Number</span>
  <input placeholder="Input Number" @bind="number1" type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
</div>

<div class="input-group mb-3">
  <span class="input-group-text" id="inputGroup-sizing-default">Second Number</span>
  <input placeholder="Input Number" @bind="number2" type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
</div>

<div class="btn-group" role="group" aria-label="Basic outlined example">
	<button @onclick="Add" type="button" data-toggle="modal" data-target="#exampleModal" class="btn btn-outline-primary">💕Addition(+)</button>
  <button @onclick="Subtract" type="button" data-toggle="modal" data-target="#exampleModal" class="btn btn-outline-primary">Subtract(-)</button>
  <button @onclick="Multiply" type="button" data-toggle="modal" data-target="#exampleModal" class="btn btn-outline-primary">Multiply(x)</button>
  <button @onclick="Divide" type="button" data-toggle="modal" data-target="#exampleModal" class="btn btn-outline-primary">Divide(/)</button>
  <button @onclick="Remainder" type="button" data-toggle="modal" data-target="#exampleModal" class="btn btn-outline-primary">Remainder(%)</button>
  <button @onclick="SquareRoot" type="button"  class="btn btn-outline-primary">Square Root(√)</button>
  <button @onclick="Clear" type="button" class="btn btn-outline-primary">Clear</button>
</div>

<br> <!-- Add a line break here -->

<div class="col-mb-4">
  <input readonly @bind="@result" class="form-control" />
</div>


@* 
@if (errorMessage != null)
{
  <div class="alert alert-danger" role="alert">
    @errorMessage
  </div>

			<div class="alert alert-danger text-center" role="alert">
	  <strong>Error</strong> @errorMessage
	  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
		<span aria-hidden="true">&times;</span>
	  </button>
	</div>
} *@

@code {

	public string number1;
	public string number2;
	public double result = 0;
	public string errorMessage;

	// Custom exception for divide by zero
	public class DivideByZeroException : Exception
	{
		public DivideByZeroException() : base("Cannot divide by zero")
		{
		}
	}

	// Custom exception for negative numbers
	public class NegativeNumberException : Exception
	{
		public NegativeNumberException() : base("Cannot take the square root of a negative number")
		{
		}

	}

	// Custom exception for equal numbers
	public class EqualNumberException : Exception
	{
		public EqualNumberException(string message) : base(message)
		{
		}
	}

	//method to check if the numbers are equal for adding numbers
	private void CheckNumberFormatAndEqualNumber()
	{
		try
		{
			double.Parse(number1);
			double.Parse(number2);

			//check if the numbers are equal for adding numbers
			if (number1 == number2)
			{
				throw new EqualNumberException("error both numbers cannot be equal");
			}
		}
		catch (FormatException)
		{
			errorMessage = "Invalid number format";
		}
		catch (Exception)
		{
			errorMessage = "An unexpected error has occured.";
		}
	}

	private void Add()
	{
		// Checks if the numbers are equal for adding numbers
		CheckNumberFormatAndEqualNumber();
		if (errorMessage != null)
		{
			return;
		}
		
		result = double.Parse(number1) + double.Parse(number2);
	}


	private void Subtract()
	{
		// Checks if the numbers are equal for subracting numbers
		CheckNumberFormatAndEqualNumber();
		if (errorMessage != null)
		{
			return;
		}
		result = double.Parse(number1) - double.Parse(number2);
	}

	private void Multiply()
	{
		// Checks if the numbers are equal for multiplying numbers
		CheckNumberFormatAndEqualNumber();
		if (errorMessage != null)
		{
			return;
		}
		result = double.Parse(number1) * double.Parse(number2);
	}

	private void Divide()
	{
		try
		{
			if (double.Parse(number2) == 0)
			{
				throw new DivideByZeroException();
			}
			result = double.Parse(number1) / double.Parse(number2);
		}
		catch (FormatException)
		{
			errorMessage = "Invalid number format";
		}
		catch (DivideByZeroException ex)
		{
			errorMessage = ex.Message;
		}
		catch (Exception)
		{
			errorMessage = "An unexpected error has occured.";
		}
	}

	private void SquareRoot()
	{
		try
		{
			if (double.Parse(number1) < 0 || double.Parse(number2) < 0)
			{
				throw new NegativeNumberException();
			}
			result = Math.Sqrt(double.Parse(number1));
		}
		catch (FormatException)
		{
			errorMessage = "Invalid number format";
		}
		catch (NegativeNumberException ex)
		{
			errorMessage = ex.Message;
		}
		catch (Exception)
		{
			errorMessage = "An unexpected error has occured.";
		}
	}

	private void Remainder()
	{
		try
		{
			if (double.Parse(number2) == 0)
			{
				throw new DivideByZeroException();
			}
			result = double.Parse(number1) % double.Parse(number2);
		}
		catch (FormatException)
		{
			errorMessage = "Invalid number format";
		}
		catch (DivideByZeroException ex)
		{
			errorMessage = ex.Message;
		}
		catch (Exception)
		{
			errorMessage = "An unexpected error has occured.";
		}
	}

	private void Clear()
	{
		number1 = "";
		number2 = "";
		result = 0;
		errorMessage = null;
	}

	private void ClearErrorMessage()
	{
		errorMessage = null;
	}


}